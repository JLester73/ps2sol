#!/usr/bin/ruby

#
# ps2sol
#
# Main script to generate CSV files from PowerSchool
# for import into the Virginia SOL Testing system
# by Pearson.
# Copyright 2011-2019 Washington County Public Schools
#

require 'getoptlong'
require 'oci8'
require 'log4r'
require 'date'
require 'pp'
require 'csv'
require "yaml"
include Log4r
require_relative 'lib/state_student.rb'
require_relative 'lib/state_ardt_student.rb'
require_relative 'lib/state_field_test_student.rb'
require_relative 'lib/state_v_student.rb'

# Option parsing
opts = GetoptLong.new(
 ["--in", "-i", GetoptLong::REQUIRED_ARGUMENT],
 ["--school", "-s", GetoptLong::REQUIRED_ARGUMENT],
 ["--type", "-t", GetoptLong::REQUIRED_ARGUMENT],
 ["--admin", "-a", GetoptLong::REQUIRED_ARGUMENT],
 ["--track", GetoptLong::OPTIONAL_ARGUMENT]
)

# Print usage if parameters are incorrect
def print_usage(error)
 print "#{__FILE__}: --school <school number> --in input_file --type section,course,single --admin administration --track p,v (optional)\n"
 exit
end

# Base Query, used for all options
base_fields_clause = "SELECT st.last_name, st.first_name,
  st.middle_name, st.student_number,
  TO_CHAR(st.dob, 'YYYY-MM-DD') as dob,
  st.grade_level, st.gender,
  st.state_studentnumber, st.fedethnicity,
  ps_customfields.getstudentscf(st.id, 'va_ercode') AS va_ercode,
  ps_customfields.getstudentscf(st.id, 'va_title1_code') 
    AS va_title1_code,
  S_VA_STU_X.Military_Connected AS va_mil_conn,
  ps_customfields.getstudentscf(st.id, 'VA_FosterCare')
    AS va_foster,
  ps_customfields.getstudentscf(st.id, 'va_PrimNight_ResCode') 
    AS va_primnight_rescode,
  ps_customfields.getstudentscf(st.id, 'va_negdelinquent_code') 
    AS va_negdelinquent_code,
  ps_customfields.getstudentscf(st.id, 'va_disadvantaged') 
    AS va_disadvantaged,
  ps_customfields.getstudentscf(st.id, 'va_primary_dis_code') 
    AS va_primary_dis_code,
  ps_customfields.getstudentscf(st.id, 'va_ell_test_tier') 
    AS va_ell_test_tier,
  ps_customfields.getstudentscf(st.id, 'va_ell_composite_score') 
    AS va_ell_composite_score,
  ps_customfields.getstudentscf(st.id, 'va_ell_literacy_score') 
    AS va_ell_literacy_score,
  S_VA_STU_X.ESL_Code AS va_formerly_el,
  to_char(entrydate, 'YYYY-MM-DD') AS entrydate, entrycode,
  to_char(exitdate, 'YYYY-MM-DD') AS exitdate, exitcode,
  st.schoolid,
  schools.abbreviation"

# Course fields add-on to base query select
course_fields_clause = ", cc.course_number, cc.section_number,
  cc.expression, courses.course_name,
  teachers.last_name AS tch_last_name,
  teachers.first_name AS tch_first_name,
  teachers.sif_stateprid AS sif_stateprid,
  ps_customfields.getCoursescf(courses.id, 'alt_course_number') 
    AS alt_course_number"

# Course table joins add-on to base query
course_tables_clause = " FROM cc INNER JOIN students st ON st.id = cc.studentid
  INNER JOIN courses ON courses.course_number = cc.course_number
  INNER JOIN sections ON sections.id = cc.sectionid
  INNER JOIN teachers ON teachers.id = sections.teacher
  INNER JOIN schools ON cc.schoolid = schools.school_number
  INNER JOIN terms ON terms.id = cc.termid
  INNER JOIN s_va_stu_x on s_va_stu_x.studentsdcid = st.dcid"

# Restrict base query to particular terms
base_restrict_clause = " WHERE terms.yearid = :year_id 
  AND st.schoolid = :school_id"

# Restrict results to particular course terms
course_section_restrict_clause = " AND terms.schoolid = :school_id"
course_restrict_clause = course_section_restrict_clause + 
" AND ps_customfields.getCoursescf(courses.id, 'alt_course_number') = 
  :alt_course_number"

# Restrict results to particular sections
section_restrict_clause = course_section_restrict_clause + 
" AND cc.section_number = :section_num 
   AND cc.course_number = :course_num"

# Query restriction used for single build option
student_tables_restrict_clause = " FROM students st
  INNER JOIN s_va_stu_x on s_va_stu_x.studentsdcid = st.dcid
  INNER JOIN schools on st.schoolid = schools.school_number
  WHERE enroll_status = 0 AND state_studentnumber = :sti"

# Query restriction used for course build option
course_section_order_clause = " ORDER BY cc.course_number, cc.section_number, 
  st.last_name, st.first_name"

# Order query results by student last, first  
student_order_clause = " ORDER BY st.last_name, st.first_name"

# Generates short Course names from VA Course Codes
# 
# param state_course code A VA state course code
#
# These must be 9 characters or less!
def gen_short_course(state_course_code)
 short_courses = { '1109' => 'Eng 6', '3110' => 'Math 6', 
  '2354' => 'US-His 6', '2357' => 'Civ Econ', '1110' => 'Eng 7',
  '3111' => 'Math 7', '3112' => 'Math 8', '4125' => 'Sci 8',
  '1120' => 'Eng 8', '3130' => 'Alg I', '3132' => 'Alg I-P2',
  '3135' => 'Alg II', '4310' => 'Biology I', '4410' => 'Chem I',
  '4210' => 'E Sci', '1140' => 'Eng 10', '1150' => 'Eng 11',
  '1196' => 'Eng 11-H', '3143' => 'Geom I', '3145' => 'Geom P2',
  '2360' => 'VA/US Hi', '2319' => 'AP US-Hi', '2210' => 'W Geog',
  '2215' => 'W-His I', '2216' => 'W-His II', '3001' => 'L-Arts 3',
  '3002' => 'Math 3', '3003' => 'Sci 3', '3004' => 'SocStu 3',
  '4001' => 'L-Arts 4', '4002' => 'Math 4', '4003' => 'Sci 4',
  '4004' => 'SocStu 4', '5001' => 'L-Arts 5', '5002' => 'Math 5',
  '5003' => 'Sci 5', '5004' => 'SocStu 5'
 }
 short_courses[state_course_code]
end

# Generates the year from the admin parameter passed
def gen_year_id(admin_info)
 season = admin_info[2]
 year = "20" + admin_info[3]
 if (season == 'sprg' || season == 'ardt')
  year_id = year.to_i - 1 - 1990
 else
  year_id = year.to_i - 1990
 end
 return year_id 
end

# Read in private config file with database info
def read_config(db_login, db_password, db_instance)
 begin
  config = YAML.load_file("config/ps2sol.yaml")
  @db_login = config["config"]["db_login"]
  @db_password = config["config"]["db_password"]
  @db_instance = config["config"]["db_instance"]
 end
end

# Figure out which sections to pull based on admin parameter
def gen_term_restriction(admin_info, year_id)
 season = admin_info[2]
  year_abbrev = (year_id + 1990).to_s.slice(2, 3) + '-' +
 (year_id + 1 + 1990).to_s.slice(2, 3)
 if (season == 'fall')
  terms = " AND (terms.abbreviation = 'S1') "
 else
  terms = " AND (terms.abbreviation = 'S2' or " +
  "terms.abbreviation = '#{year_abbrev}') "
 end
 return terms
end

def gen_track_restriction(track, have_track_f)
  if (have_track_f)
    case track
	 when 'p'
	  # Restrict base query to particular student schedule A,B,C tracks
      track_clause = " AND (st.track = 'A' OR st.track = 'B' OR st.track='C')"
	when 'v'
	  # Restrict base query to particular student schedule D track
      track_clause = " AND st.track = 'D'" 
	else
	  puts ""
	  puts "Invalid track parameter, must be p for in-person or v for virtual"
	  puts ""
	end
  else track_clause = " "
  end
  return track_clause
end
	  

# Initialize parameters
have_type_f = false
have_input_f = false
have_admin_f = false
have_school_f = false
have_track_f = false
type = ''
admin = ''
input_file = ''
school = ''
year = ''
track = ''

# Read in command line parameters
begin
 opts.each do |opt, arg|
  case opt
  when '--in'
   input_file = arg
   have_input_f = true
  when '--school'
   school = arg
   have_school_f = true
  when '--type'
   case arg
   when 'course'
    type = arg
    have_type_f = true
   when 'section'
    type = arg
    have_type_f = true
   when 'single'
    type = arg
    have_type_f = true
   end
  when '--admin'
   admin = arg
   have_admin_f = true
  when '--track'
   track = arg
   have_track_f = true
  end
 end

 # No options give, but we require at least one option --in
 if (!have_input_f || !have_type_f || !have_admin_f || !have_school_f) 
  print_usage(1)
 end
rescue
 print_usage(1)
end


begin
 # Read in config file
 read_config(@db_login, @db_password, @db_instance)
 printf "Processing: %i\n", school
 CSV.foreach(input_file, :headers => :first_row) do |row|
  admin = admin.slice(0, 8) if admin.length > 8
  admin_info = admin.match(/^(wr|nw|ft|va|v)(fall|sprg|sprng|ardt|summ)([0-9]{2})$/)
  log  = Logger.new('Student')
  log.outputters = FileOutputter.new('Student',
  :filename => "#{school}-students.log", :trunc => false)
  log.level = WARN

  # Start of main processing section
  begin
   dbh = OCI8.new(@db_login, @db_password, @db_instance)
   case type
   when 'single' # Processing single option
    puts "Processing: students from #{school}:"
    if admin_info[1] == 'v'
     sti = row[0].to_i
     group = row[1]
     group_code = row[2]
     test = row[3]
     recovery = row[4]
     retest = row[5]
     d_code = row[6]
     term_grad = row[7]
     proj_grad = row[8]
     vgla = row[9]
     vaap = row[10]
     vsep = row[11]
    else
     sti = row[0].to_i
     group = row[1]
     group_code = row[2]
     test = row[3]
     online = row[4]
     recovery = row[5]
     retest = row[6]
     d_code = row[7]
     term_grad = row[8]
     proj_grad = row[9]
     retest_college = row[10]
    end

    # Build and run the query
    query = base_fields_clause + student_tables_restrict_clause
    sth = dbh.parse(query)
    sth.bind_param(':sti', sti)
    sth.exec()
	
   when 'section' # Processing section option, not used now?
    group_code = row[0]
    section_info = row[0].split(/\./)
    test = row[1]
    online = row[2]

    # Get year id and term restrictions for query
    year_id = gen_year_id(admin_info)
    term_restrict_clause = gen_term_restriction(admin_info, year_id)
	
    # Build and run the query
    query = base_fields_clause + course_fields_clause + 
    course_tables_clause + base_restrict_clause + 
	track_restrict_clause +
    section_restrict_clause + term_restrict_clause + 
    course_section_order_clause
    sth = dbh.parse(query)
    sth.bind_param(':year_id', year_id)
    sth.bind_param(':school_id', school)
    sth.bind_param(':section_num', section_info[1])
    sth.bind_param(':course_num', section_info[0])
    sth.exec()
	
   when 'course' # Processing course option
    course = row[0]
    test = row[1]
    online = row[2]
    puts "Processing: course: #{course} for test: #{test} " +
    "from school: #{school}:"

    # Get year id and term restrictions for query
    year_id = gen_year_id(admin_info)
    term_restrict_clause = gen_term_restriction(admin_info, year_id)
	
	# Get track clause for in-person/virtual if needed
	track_restrict_clause = gen_track_restriction(track, have_track_f)

    # Build and run the query
    query = base_fields_clause + 
    course_fields_clause + course_tables_clause + 
    base_restrict_clause + 
	track_restrict_clause + course_restrict_clause + 
    term_restrict_clause + course_section_order_clause
    sth = dbh.parse(query)
    sth.bind_param(':year_id', year_id)
    sth.bind_param(':school_id', school)
    sth.bind_param(':alt_course_number', course.to_s)
    sth.exec()
   end

   # JL Loop changes to add error reporting for missing STI's
   # Reads query results into array of hashes, then loops through array
   # of results.
   output_array = Array.new
   sth.fetch_hash do |fetch_row|
    output_array << fetch_row
   end
   
   # Outputs an error now for courses with 0 students.  This will be
   # immediately followed by an error about a missing STI (since there
   # are no students in the course).
   # To-Do: Modify logic to break from loop if the course has 0 students
   log.error "Course Has 0 Students Enrolled" if (sth.row_count==0)
   
   puts "Student Count: " + sth.row_count.to_s
   log.error "STI #{sti} Not Found!" if output_array.empty?
   output_array.each_index do |index|
    row = output_array[index]
    if ((type == 'section' || type == 'course') && 
     !row['COURSE_NAME'].nil? &&	
    !row['TCH_LAST_NAME'].nil?)
    group = "#{gen_short_course(row['ALT_COURSE_NUMBER'])} " +
    "#{row['TCH_LAST_NAME'].slice(0, 6).strip} " +
    "#{row['EXPRESSION'].gsub(/[()]/, '').strip.slice(0,4)}"
   end
   if (type == 'course')
    group_code = row['COURSE_NUMBER'] + '.' + row['SECTION_NUMBER']
   end
   
   # Code to generate session name for SRI 2017 Changes
   session_name = "#{row['ABBREVIATION']} - #{group_code} - #{group}"
   
   if (admin_info[1] == 'ft') then # Field test data format
    student = StateFTStudent.new do
     self.admin = admin
     self.last_name = row['LAST_NAME']
     self.first_name = row['FIRST_NAME']
     self.middle_name = row['MIDDLE_NAME']
     self.sti = row['STATE_STUDENTNUMBER']
     self.division = "094"
     self.va_schoolid = row['SCHOOLID']
     self.test_code = test
     self.group_name = group
     self.group_code = group_code
     self.birth_date = row['DOB']
     self.grade = row['GRADE_LEVEL']
     self.gender = row['GENDER']
     self.ethnicity = row['FEDETHNICITY']
     self.race = row['VA_ERCODE']
     self.student_number = row['STUDENT_NUMBER']
     self.t1_tas = row['VA_TTITLE1_CODE']
     self.primnight_rescode = row['VA_PRIMNIGHT_RESCODE']
     self.neg_del = row['VA_NEGDELINQUENT_CODE']
     self.n_code = row['VA_DISADVANTAGED']
     self.ell_test_tier = row['VA_ELL_TEST_TIER']
     self.ell_comp_score = row['VA_ELL_COMPOSITE_SCORE']
     self.ell_lit_score = row['VA_ELL_LITERACY_SCORE']
     self.dis_code = row['VA_PRIMARY_DIS_CODE']
     self.soa_lep = row['SOL_SOA_LEP']
     self.soa_trans = row['SOL_SOA_TRANSFER']
     self.ayp_d = row['SOL_AYP_D']
     self.rp_code = row['SOL_RP_CODE']
     self.d_code = row['SOL_D_CODE']
     self.term_grad = row['SOL_TERM_GRAD']
     self.formerly_lep = row['VA_LEP_SERV_CD']
     self.online = online
     self.retest = retest
     self.recovery = recovery
     self.proj_grad = proj_grad
     self.enroll_date = row['ENTRYDATE']
     self.enroll_code = row['ENTRYCODE']
     self.withdrawal_date = row['EXITDATE']
     self.withdrawal_code = row['EXITCODE']
     self.vtln = row['SIF_STATEPRID']
    end
   elsif (admin_info[1] == 'v') then # VGLA data format
    student = StateVStudent.new do
     self.admin = admin
     self.last_name = row['LAST_NAME']
     self.first_name = row['FIRST_NAME']
     self.middle_name = row['MIDDLE_NAME']
     self.sti = row['STATE_STUDENTNUMBER']
     self.division = "094"
     self.va_schoolid = row['SCHOOLID']
     self.test_code = test
     self.group_name = group
     self.group_code = group_code
     self.birth_date = row['DOB']
     self.grade = row['GRADE_LEVEL']
     self.gender = row['GENDER']
     self.ethnicity = row['FEDETHNICITY']
     self.race = row['VA_ERCODE']
     self.student_number = row['STUDENT_NUMBER']
     self.mil_conn = row['VA_MIL_CONN']
     self.foster = row['VA_FOSTER']
     self.primnight_rescode = row['VA_PRIMNIGHT_RESCODE']
     self.n_code = row['VA_DISADVANTAGED']
     self.ell_comp_score = row['VA_ELL_COMPOSITE_SCORE']
     self.dis_code = row['VA_PRIMARY_DIS_CODE']
     self.soa_lep = row['SOL_SOA_LEP']
     self.soa_trans = row['SOL_SOA_TRANSFER']
     self.formerly_lep = row['VA_FORMERLY_EL']
     self.recovery = recovery
     self.vtln = row['SIF_STATEPRID']
	 self.tln = row['TCH_LAST_NAME']
	 self.tfn = row['TCH_FIRST_NAME']
    end
   elsif (admin_info[1] == 'va') then # ARDT data format
    student = StateARDTStudent.new do
     self.admin = admin
     self.last_name = row['LAST_NAME']
     self.first_name = row['FIRST_NAME']
     self.middle_name = row['MIDDLE_NAME']
     self.sti = row['STATE_STUDENTNUMBER']
     self.division = "094"
     self.va_schoolid = row['SCHOOLID']
     self.test_code = test
     self.group_name = group
     self.group_code = group_code
     self.birth_date = row['DOB']
     self.grade = row['GRADE_LEVEL']
     self.gender = row['GENDER']
     self.ethnicity = row['FEDETHNICITY']
     self.race = row['VA_ERCODE']
     self.dis_code = row['VA_PRIMARY_DIS_CODE']
     self.lep_code = row['VA_LEP_SERV_CD']
     self.enroll_date = row['ENTRYDATE']
     self.enroll_code = row['ENTRYCODE']
     self.withdrawal_date = row['EXITDATE']
     self.withdrawal_code = row['EXITCODE']
     self.vtln = row['SIF_STATEPRID']
    end
   else
    student = StateStudent.new do # Standard SOL data format
     self.admin = admin
     self.last_name = row['LAST_NAME']
     self.first_name = row['FIRST_NAME']
     self.middle_name = row['MIDDLE_NAME']
     self.sti = row['STATE_STUDENTNUMBER']
     self.division = "094"
     self.va_schoolid = row['SCHOOLID']
     self.test_code = test
     self.group_name = group
     self.group_code = group_code
     self.birth_date = row['DOB']
     self.grade = row['GRADE_LEVEL']
     self.gender = row['GENDER']
     self.ethnicity = row['FEDETHNICITY']
     self.race = row['VA_ERCODE']
     self.student_number = row['STUDENT_NUMBER']
     self.mil_conn = row['VA_MIL_CONN']
     self.foster = row['VA_FOSTER']
     self.primnight_rescode = row['VA_PRIMNIGHT_RESCODE']
     self.n_code = row['VA_DISADVANTAGED']
     self.ell_comp_score = row['VA_ELL_COMPOSITE_SCORE']
     self.dis_code = row['VA_PRIMARY_DIS_CODE']
     self.soa_lep = row['SOL_SOA_LEP']
     self.soa_trans = row['SOL_SOA_TRANSFER']
     self.d_code = row['SOL_D_CODE']
     self.term_grad = row['SOL_TERM_GRAD']
     self.formerly_lep = row['VA_FORMERLY_EL']
     self.online = online
	 self.session_name = session_name
     self.recovery = recovery
     self.retest = retest
     self.d_code = d_code
     self.term_grad = term_grad
     self.proj_grad = proj_grad
     self.vtln = row['SIF_STATEPRID']
	 self.tln = row['TCH_LAST_NAME']
	 self.tfn = row['TCH_FIRST_NAME']
    end
   end
   if(!student.to_csv)
    # Log any errors
    student.errors.each_value do |error|
     log.error "#{student.sti}: #{error}"
    end
   end
   # Log any warnings
   student.warns.each_value do |warn|
    log.warn "#{student.sti}: #{warn}"
   end
  end
  printf "done.\n\n"
 rescue OCIError => e
  puts "An error occurred"
  puts "Error code: #{e}"
  ensure
  # disconnect from server
  dbh.logoff if dbh
 end
end
rescue SystemCallError => errno
 puts errno
end
