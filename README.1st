**NOTICE**
These files and scripts are provided without any assurances that they
will work properly in your environment.  There is also no guarantee
that something won't get messed up in either PowerSchool or PEM
by using this project.  Use at your own risk, understand what the
commands will be doing, and use in a test environment if possible!

**Background**
This program was created by Chris Edwards of Washington County Public Schools
in Virginia.  The original version worked with SASI and has been updated
since to support PowerSchool.  It is updated each testing session to match
any changes released by the state.

The program has been maintained since 2014 by Jason Lester, also of
Washingon County Schools.

**Description**
This script exports out the CSV files needed for upload into Pearson's
Virginia SOL Testing system.  It understands a few different options
and can be completely automated for the full testing session imports
each spring and fall.

**Release**
The latest version is always available on Github from:
  https://github.com/JLester73/ps2sol
  
**Requirements**
We run the scripts on a Debian Linux server.  It should theoretically work
on any system that supports Ruby, but we have not tested on anything else.
You will need to have Ruby, Rake, and Oracle's InstantClient all installed
and working properly.  Installing and configuring those is mostly outside
the scope of this document except where it applies specifically to these
scripts.

Dependencies:
- Ruby 1.9 or higher
- Rake 0.8.7 or higher
- A Unix/Linux-like environment
- Oracle Instantclient
- PowerSchool v8 or higher (tested all the way to 10.0.3)

Ruby Dependencies:
- Log4r Gem
- OCI8 Ruby Library for Oracle (compiled against your instantclient)
- YAML Gem

**Setup**
- Unzip the package onto the sytem that will be running it.  We use a special
  user account called "data" on our server and place each script in that
  user's home directory.  This one would be in /home/data/ps2sol for
  example.
- Edit the "Rakefile" and make sure the ADMIN and SCHOOLS variables are
  set properly if you are going to automate building all your schools
  for the full Fall or Spring sessions.  ADMIN should match the test
  session format specified by Pearson.  SCHOOLS should be a space-separated
  list of all the school numbers you want to automate.
- For the Oracle instantclient, you will need to configure a tnsnames.ora
  file to tell the client how to locate your PowerSchool Oracle DB server.
  It will look something like this:
------
    PSPRODDB =
      (DESCRIPTION =
         (ADDRESS = (PROTOCOL = TCP)(HOST = 192.168.1.1)(PORT = 1521))
         (CONNECT_DATA =
           (SERVER = DEDICATED)
           (SERVICE_NAME = PSPRODDB)
         )
       )
------
  PSPRODDB is what we're calling the service when we call it in Ruby.
  Host should be set to your server's IP address and Service_Name should be
  set to the PowerSchool database's server instance (normally PSPRODDB).
- Edit the /config/ps2sol.yaml.example file to update your login and
  password information for your PowerSchool Oracle database.  We recommend
  using the psnavigator account since it has read-only access to your
  database.  Update the three lines to match your installation and save
  the file as ps2sol.yaml.

**Usage**

Fully Automated Build for Full Spring/Fall Sessions:
- The rake program is used to build the files and to clean the directory in
  preparation for a new build.  Always clean the directory before running a
  new build or you will have duplicate entries.
- Clean the directory by running "rake clean".  This will delete all files
  that were written out by the build process.
- For each school specified in the Rakefile, you should have a corresponding
  CSV file that matches course numbers with testcodes.  If you specified a
  school number of 1000 in the Rakefile, you also need a 1000.csv file.  The
  format of that file is shown in example-course.csv.  The first field should
  be the course number from PowerSchool (using the Alt Course Number field),
  the second field should be the test code that matches that course, and the
  third field should always be 'Y'.  The third field is a holdout from when
  this program also built import files for paper and pencil testing.
- When your Rakefile is ready and you've created CSV files for each school
  you'll be building, run "rake clean" followed by "rake" to clean the
  directory and run a new build.  You should see it step through the schools
  and sections and printout out what it is doing.  When complete, you should
  have two new files for each school: schoolnum-students.csv and
  schoolnum-students.log.  Check each log file for errors related to that
  school.  Some common ones are: "No VTLN" = No Virginia License Number for
  teacher, "No Middle Name" = Student has no middle name in PowerSchool,
  "No STI" = STI not available in PowerSchool.  Warnings don't stop that
  line from building.  Errors mean that line was not built.  A missing STI
  for example stops the student from being built in the CSV file.
- When satisfied that the files are correct, you can either upload each
  schools -students.csv file individually to Pearson Access or cat them
  all together and do one big upload.

Single Course Build:
- You can build the CSV file for a single course with a few simple commands.
  The automated process detailed above is just calling the ps2sol course
  option for each school.  If you wanted to build just the import for
  school number 1000 and course number 1140, the command would look like
    "./ps2sol --school 1000 --in 1000.csv --type course --admin wrfall16"
  That tells ps2sol to look at school 1000 in PowerSchool, use the course
  to testcode mapping from 1000.csv, use the course-only logic, and use
  testing admin wrfall16.

Single Section Build:
- This is a holdout that is no longer used.

Single Student Build:
- This option is used to build import files for things like retakes where
  it isn't easy to programmatically determine what data to pull from
  PowerSchool.  For the single type, you need a CSV file in this format:
    " STI, Group Name, Group Code, Test Code, Online?, Recovery?, Retest?, D-Code?, Term Grad?, Project Grad?"
  You should have one CSV per school  The command to process the CSV input
  file would be:
    "./ps2sol --school 1000 --in retakes.csv --type single --admin wrfall16"
  This would build an import file for each line specified in the retakes.csv
  file for school 1000.
